{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setReverseState","visibleGoods","goods","sort","g1","g2","ALPHABET","localeCompare","LENGTH","length","reverse","console","log","getReorderedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAwCE,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAsCH,oBAAS,GAA/C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAtCD,SACLC,EACAL,EACAE,GAGA,IAAME,EAAY,YAAOC,GAyBzB,OAtBIL,GACFI,EAAaE,MAAK,SAACC,EAAIC,GACrB,OAAQR,GACN,KAAKL,EAASc,SACZ,OAAOF,EAAGG,cAAcF,GAE1B,KAAKb,EAASgB,OACZ,OAAOJ,EAAGK,OAASJ,EAAGI,OAExB,QACE,OAAO,MAKXV,GACFE,EAAaS,UAIfC,QAAQC,IAAIf,EAAUE,GAEfE,EAOcY,CAAkBpB,EAAiBI,EAAUE,GAGhEH,EAGEJ,EAHFI,KACAU,EAEEd,EAFFc,SACAE,EACEhB,EADFgB,OAGF,OACE,sBAAKM,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CACE,WAAYnB,IAAaS,IAG7BW,QAAS,kBAAMnB,EAAYQ,IAR7B,iCAaA,wBACES,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,WAAYnB,IAAaW,IAG7BS,QAAS,kBAAMnB,EAAYU,IAR7B,4BAaA,wBACEO,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAajB,IAEjBkB,QAAS,kBAAMjB,GAAiBD,IANlC,sBAUEA,GAAcF,IAAaD,IAC3B,wBACEmB,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPjB,GAAgB,GAChBF,EAAYF,IALhB,sBAYJ,6BAEIK,EAAaiB,KAAI,SAAAC,GAAI,OACnB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YC1HpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a60caa33.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport function getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  // Sort and reverse goods if needed\n  if (sortType) {\n    visibleGoods.sort((g1, g2) => {\n      switch (sortType) {\n        case SortType.ALPHABET:\n          return g1.localeCompare(g2);\n\n        case SortType.LENGTH:\n          return g1.length - g2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setReverseState] = useState(false);\n\n  const visibleGoods = getReorderedGoods(goodsFromServer, sortType, isReversed);\n\n  const {\n    NONE,\n    ALPHABET,\n    LENGTH,\n  } = SortType;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            {\n              'is-light': sortType !== ALPHABET,\n            },\n          )}\n          onClick={() => setSortType(ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            {\n              'is-light': sortType !== LENGTH,\n            },\n          )}\n          onClick={() => setSortType(LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => setReverseState(!isReversed)}\n        >\n          Reverse\n        </button>\n        {(isReversed || sortType !== NONE) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setReverseState(false);\n              setSortType(NONE);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n      <ul>\n        {\n          visibleGoods.map(good => (\n            <li data-cy=\"Good\" key={good}>\n              {good}\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}